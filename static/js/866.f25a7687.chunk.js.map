{"version":3,"file":"static/js/866.f25a7687.chunk.js","mappings":"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","sources":["redux/actions/details.actions.js","components/Graph.js","components/Circle.js","hooks/useGetRange.js","components/Chart.js"],"sourcesContent":["import { DETAILS_START, DETAILS_SUCCESS, DETAILS_FAIL } from '../types/details.types';\r\nimport axios from 'axios';\r\n\r\nexport const fetchDetails = () => async (dispatch) => {\r\n    dispatch(request());\r\n    try {\r\n        await axios.get('https://mocki.io/v1/18936d28-2f79-4840-b146-5622e8ad1e77')\r\n            .then((res) => {\r\n                // console.log('resultLogging', res)\r\n                const data = res?.data; \r\n                data && dispatch(success(data));\r\n            });\r\n    } catch (err) {\r\n        console.error('fetchDetailsError', err.message);\r\n        dispatch(fail(err.message));\r\n    } finally {\r\n        console.log('API Called');\r\n    }\r\n};\r\n\r\nexport const request = () => {\r\n    return {\r\n        type: DETAILS_START,\r\n    };\r\n};\r\nexport const success = (DETAILS) => {\r\n    return {\r\n        type: DETAILS_SUCCESS,\r\n        payload: DETAILS,\r\n    };\r\n};\r\nexport const fail = (data) => {\r\n    return {\r\n        type: DETAILS_FAIL,\r\n        payload: data,\r\n    };\r\n};\r\n","import React, {memo} from 'react'\r\n\r\nconst Graph = ({ x, y, length, horizontal }) => {\r\n  //values for x y graph\r\n    const coords = {\r\n        x1: x,\r\n        y1: y,\r\n        x2: horizontal ? x + length : x,\r\n        y2: horizontal ? y : length + y\r\n      };\r\n\r\n  return (\r\n    <g>\r\n      <line {...coords} stroke=\"#00b3b3\" strokeWidth={2} />\r\n    </g>\r\n  )\r\n}\r\n\r\nexport default memo(Graph)\r\n","import React, { memo, useMemo } from 'react';\r\n\r\nconst Circle = ({ x, y, radius, title }) => {\r\n  \r\n  //memoized calculation for random color\r\n    const color = useMemo(\r\n        () =>\r\n            `#${Math.floor(Math.random() * 0xffffff)\r\n                .toString(16)\r\n                .padEnd(6, '0')}`,\r\n        []\r\n    );\r\n\r\n\r\n    return (\r\n        <g onMouseEnter={() => console.log(title)}>\r\n            <circle\r\n                cx={x}\r\n                cy={y}\r\n                r={radius - 1}\r\n                fill={'none'}\r\n                strokeWidth={2}\r\n                stroke={color}\r\n                strokeOpacity={0.4}\r\n            />\r\n            <circle cx={x} cy={y} r={radius} fill={color} opacity={0.3} />\r\n            <text x={x - radius / 3} y={y} style={{ fontSize: '14px' }}>\r\n                {title}\r\n            </text>\r\n        </g>\r\n    );\r\n};\r\n\r\nexport default memo(Circle);\r\n","export function useGetRange(min, max, step) {\r\n    //min and max for starting and ending, step for distance b/w markings \r\n    let count = new Array();\r\n    for (let i = min; i <= max; ) {\r\n        count.push(i);\r\n        i += step;\r\n    }\r\n    return count;\r\n}\r\n","import React, { Fragment, useEffect, useState, useCallback, memo } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchDetails } from '../redux/actions/details.actions';\r\n//components\r\nimport Graph from './Graph';\r\nimport Circle from './Circle';\r\n//custom hooks\r\nimport { useGetRange } from '../hooks/useGetRange';\r\n\r\nconst Chart = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const details = useSelector((state) => state.details);\r\n    const [values, setValues] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // to dispatch API\r\n        dispatch(fetchDetails());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        //setting state from API\r\n        setValues(details.data);\r\n    }, [details]);\r\n\r\n    //memoized function to get minimun from API data based on field passed\r\n    const getMin = useCallback((key) => {\r\n        let mathMax = Number.MAX_VALUE;\r\n        let maxValue = 0;\r\n        values?.forEach((element) => {\r\n            if (element[key] < mathMax) {\r\n                maxValue = element[key];\r\n                mathMax = element[key];\r\n            }\r\n        });\r\n        return maxValue;\r\n    },[values]);\r\n\r\n    //function to get maximum from API data based on field passed\r\n    const getMax = (key) => values?.reduce((acc, cur) => cur[key] > acc ? cur[key] : acc, 0);\r\n        \r\n    //variables for charts and SVG\r\n    const maxRadius = getMax('headcount');\r\n    const mostSalary = getMax('salary');\r\n    const mostCompRatio = getMax('compratio');\r\n    let minCompRatio = getMin('compratio');\r\n    let minSalary = getMin('salary');\r\n\r\n    //setting markings on x,y coordinates with custom hook\r\n    let rangeY = useGetRange(minSalary, mostSalary, 20);\r\n    let rangeX = useGetRange(minCompRatio, mostCompRatio, 5);\r\n    rangeX.push(mostCompRatio);\r\n    rangeY.push(mostSalary);\r\n\r\n    //variable for chart positions\r\n    const chartHeight = mostSalary + maxRadius / 2;\r\n    const chartWidth = (mostCompRatio - minCompRatio) * 10 + maxRadius + 100;\r\n\r\n    //for svg viewbox\r\n    const translateX = minSalary - maxRadius;\r\n    const translateY = minCompRatio;\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                position: 'relative',\r\n                height: chartHeight,\r\n                width: chartWidth,\r\n                left: 100,\r\n                top: 100,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    position: 'absolute',\r\n                    top: '0',\r\n                    left: '0',\r\n                }}\r\n            >\r\n                <svg\r\n                    viewBox={`${translateX} ${translateY} ${chartWidth + 30} ${chartHeight + 30}`}\r\n                    width={chartWidth}\r\n                    height={chartHeight}\r\n                >\r\n                    <text\r\n                        x={(mostCompRatio + minCompRatio) / 2}\r\n                        y={chartHeight + minCompRatio - 2 + 30}\r\n                        style={{ fontSize: '12px' }}\r\n                    >\r\n                        {'Compratio'}\r\n                    </text>\r\n                    {rangeX.map((val, index) => (\r\n                        <Fragment key={index}>\r\n                            <text\r\n                                x={(val - minCompRatio) * 10}\r\n                                y={chartHeight + minCompRatio - 2 + 20}\r\n                                style={{ fontSize: '12px' }}\r\n                            >\r\n                                {val}\r\n                            </text>\r\n                            <line\r\n                                x1={(val - minCompRatio) * 10}\r\n                                x2={(val - minCompRatio) * 10}\r\n                                y1={chartHeight + minCompRatio}\r\n                                y2={chartHeight + minCompRatio - 5}\r\n                                stroke='green'\r\n                                strokeWidth={2}\r\n                            />\r\n                        </Fragment>\r\n                    ))}\r\n\r\n                    <Graph\r\n                        x={minSalary - maxRadius}\r\n                        y={chartHeight + minCompRatio - 2}\r\n                        length={chartWidth}\r\n                        horizontal={true}\r\n                    />\r\n                    {rangeY.reverse().map((val, index) => (\r\n                        <Fragment key={index}>\r\n                            <text\r\n                                x={minSalary - maxRadius - 20}\r\n                                y={chartHeight - val}\r\n                                style={{ fontSize: '12px', color: 'red' }}\r\n                            >\r\n                                {val}\r\n                            </text>\r\n                            <line\r\n                                x1={minSalary - maxRadius + 2}\r\n                                x2={minSalary - maxRadius + 5}\r\n                                y1={chartHeight - val - 2}\r\n                                y2={chartHeight - val - 2}\r\n                                stroke='green'\r\n                                strokeWidth={2}\r\n                            />\r\n                        </Fragment>\r\n                    ))}\r\n                    <Graph\r\n                        x={minSalary - maxRadius + 2}\r\n                        y={0}\r\n                        length={chartHeight + minCompRatio}\r\n                        horizontal={false}\r\n                    />\r\n\r\n                    {values?.map((datum, index) => {\r\n                        return (\r\n                            <Circle\r\n                                key={datum.title}\r\n                                x={datum.compratio * 10 - minCompRatio * 10}\r\n                                y={chartHeight - datum.salary}\r\n                                radius={datum.headcount / 2}\r\n                                title={datum.title}\r\n                                xLabel={datum.compratio}\r\n                                yLabel={datum.salary}\r\n                            />\r\n                        );\r\n                    })}\r\n                </svg>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    position: 'absolute',\r\n                    bottom: '-52px',\r\n                    width: '100%',\r\n                    left: '35px',\r\n                    justifyContent: 'space-around',\r\n                }}\r\n            ></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(Chart);\r\n"],"names":["request","type","DETAILS_START","success","DETAILS","DETAILS_SUCCESS","payload","fail","data","DETAILS_FAIL","Graph","x","y","length","horizontal","coords","x1","y1","x2","y2","stroke","strokeWidth","memo","Circle","radius","title","color","useMemo","Math","floor","random","toString","padEnd","onMouseEnter","console","log","cx","cy","r","fill","strokeOpacity","opacity","style","fontSize","useGetRange","min","max","step","count","Array","i","push","Chart","dispatch","useDispatch","details","useSelector","state","useState","values","setValues","useEffect","axios","then","res","error","message","getMin","useCallback","key","mathMax","Number","MAX_VALUE","maxValue","forEach","element","getMax","reduce","acc","cur","maxRadius","mostSalary","mostCompRatio","minCompRatio","minSalary","rangeY","rangeX","chartHeight","chartWidth","translateX","translateY","position","height","width","left","top","display","viewBox","map","val","index","Fragment","reverse","datum","compratio","salary","headcount","xLabel","yLabel","bottom","justifyContent"],"sourceRoot":""}